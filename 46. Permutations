Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 
Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        result = []
        
        def backtrack(current_permutation):
            # If the current permutation is the same length as nums, we found a valid permutation
            if len(current_permutation) == len(nums):
                result.append(current_permutation[:])  # Append a copy of the current permutation
                return
            
            for num in nums:
                if num in current_permutation:
                    continue  # Skip if the number is already in the current permutation
                current_permutation.append(num)  # Add the number to the current permutation
                backtrack(current_permutation)  # Recurse
                current_permutation.pop()  # Remove the last number to backtrack
        
        backtrack([])  # Start with an empty permutation
        return result
