Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values.

https://www.geeksforgeeks.org/problems/burning-tree/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=burning-tree

#include <bits/stdc+.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

class Solution {
public:
    // Function to find the target node and build a parent map
    Node* findTarget(Node* root, int target, unordered_map<Node*, Node*>& parentMap) {
        if (!root) return nullptr;

        // Use a queue for BFS to find the target and build the parent map
        queue<Node*> q;
        q.push(root);
        Node* targetNode = nullptr;

        while (!q.empty()) {
            Node* current = q.front();
            q.pop();

            // If we found the target node
            if (current->data == target) {
                targetNode = current;
            }

            // Add children to the queue
            if (current->left) {
                parentMap[current->left] = current; // Set parent
                q.push(current->left);
            }
            if (current->right) {
                parentMap[current->right] = current; // Set parent
                q.push(current->right);
            }
        }
        return targetNode;
    }

    // Function to calculate the time to burn the tree
    int burnTree(Node* targetNode, unordered_map<Node*, Node*>& parentMap) {
        queue<Node*> q;
        q.push(targetNode);
        unordered_set<Node*> visited;
        visited.insert(targetNode);
        int time = 0;

        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                Node* current = q.front();
                q.pop();

                // Check the parent
                if (parentMap.find(current) != parentMap.end() && visited.find(parentMap[current]) == visited.end()) {
                    q.push(parentMap[current]);
                    visited.insert(parentMap[current]);
                }

                // Check the left child
                if (current->left && visited.find(current->left) == visited.end()) {
                    q.push(current->left);
                    visited.insert(current->left);
                }

                // Check the right child
                if (current->right && visited.find(current->right) == visited.end()) {
                    q.push(current->right);
                    visited.insert(current->right);
                }
            }
            // Increment time after processing all nodes at the current level
            if (!q.empty()) {
                time++;
            }
        }
        return time;
    }

    int minTime(Node* root, int target) {
        unordered_map<Node*, Node*> parentMap; // To store parent pointers
        Node* targetNode = findTarget(root, target, parentMap);
        if (!targetNode) return 0;

        return burnTree(targetNode, parentMap);
    }
};
