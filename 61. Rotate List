Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]
 
Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def rotateRight(head: ListNode, k: int) -> ListNode:
    if not head or not head.next or k == 0:
        return head

    # Step 1: Determine the length of the list
    length = 1
    current = head
    while current.next:
        current = current.next
        length += 1

    # Step 2: Normalize k
    k = k % length
    if k == 0:
        return head

    # Step 3: Find the new head
    current = head
    for _ in range(length - k - 1):
        current = current.next

    # Step 4: Rearrange pointers
    new_head = current.next
    current.next = None
    tail = new_head
    while tail.next:
        tail = tail.next
    tail.next = head

    return new_head
