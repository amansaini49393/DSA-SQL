Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:
Input: rowIndex = 3
Output: [1,3,3,1]

Example 2:
Input: rowIndex = 0
Output: [1]

Example 3:
Input: rowIndex = 1
Output: [1,1]
 

Constraints:

0 <= rowIndex <= 33
 

Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?


class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        row = [1]  # The first element of any row is always 1
        for k in range(1, rowIndex + 1):
            # calculate the next element based on the previous one
            next_element = row[k - 1] * (rowIndex - k + 1) // k
            row.append(next_element)
        return row
